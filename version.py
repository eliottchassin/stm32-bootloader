import os, sys, subprocess, fileinput, platform

GitPathWin64=r'C:\Program Files\Git\bin\git.exe'
GitPathWin32=r'C:\Program Files (x86)\Git\bin\git.exe'
GitPathLinux='/usr/bin/git'
GitPath=GitPathWin64

def get_git_revision_hash():
    return subprocess.check_output([GitPath, 'rev-parse', 'HEAD'])

def get_git_revision_short_hash():
    return subprocess.check_output([GitPath, 'rev-parse', '--short', 'HEAD'])

""" Getting the rigth git location
"""
system = platform.system()
if system == 'Linux':
    GitPath=GitPathLinux
elif system == 'Windows':
    if os.path.isfile(GitPathWin64):
        GitPath=GitPathWin64
    elif os.path.isfile(GitPathWin32):
        GitPath=GitPathWin32
else:
    GitPath='Unknown'

""" Getting the git HASH.
    if platform is not managed, git is not installed or current directory is not a git clone, HASH will be "000000..."
"""
hash = "0000000000000000000000000000000000000000"
try:
    hash = get_git_revision_hash()
except OSError:
    pass
except subprocess.CalledProcessError:
    pass
print 'Git hash is ' + hash

""" Preparing the Version Revision Jobs
"""
rev_size = 8
rev_line = '#define VERSION_REVISION    '+'"'+hash[0:rev_size]+'"\n'
rev_diff = True

""" Trying to parse current Revision in ignored file 'version_git.h'
"""
try:
    f_reader = open('./inc/version_git.h','r')
    input_lines = f_reader.readlines()
    f_reader.close()

    for line in input_lines:
        if ('VERSION_REVISION' in line) and (rev_line == line):
            print 'Revision has not changed.'
            rev_diff = False

except:
    print 'version_git.h does not exist.'

""" If 'version_git.h' did not exist or revison changed, update (or create) 'version_git.h'
"""
if rev_diff == True:
    print 'Revision has changed.'
    f_writer = open('./inc/version_git.h','w')
    f_writer.write('/**\n')
    f_writer.write(' * \\file    version_git.h\n')
    f_writer.write(' * \\brief   autogenerated application revision definition file\n')
    f_writer.write(' * \\note    Revision number is generated by the version python script and uses git tools.\n')
    f_writer.write(' *          Revision number remains 000000 if any script problem occurres.\n')
    f_writer.write(' */\n\n')
    f_writer.write('#ifndef VERSION_GIT_H\n')
    f_writer.write('#define VERSION_GIT_H\n\n')
    f_writer.write('#define VERSION_REV_SZ      %d\n' % (rev_size))
    f_writer.write(rev_line)
    f_writer.write('\n#endif // VERSION_GIT_H\n')
    f_writer.close()
